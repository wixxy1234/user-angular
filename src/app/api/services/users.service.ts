/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUsersGet$Json } from '../fn/users/api-users-get-json';
import { ApiUsersGet$Json$Params } from '../fn/users/api-users-get-json';
import { apiUsersGet$Plain } from '../fn/users/api-users-get-plain';
import { ApiUsersGet$Plain$Params } from '../fn/users/api-users-get-plain';
import { apiUsersPost$Json } from '../fn/users/api-users-post-json';
import { ApiUsersPost$Json$Params } from '../fn/users/api-users-post-json';
import { apiUsersPost$Plain } from '../fn/users/api-users-post-plain';
import { ApiUsersPost$Plain$Params } from '../fn/users/api-users-post-plain';
import { apiUsersUserGuidDelete } from '../fn/users/api-users-user-guid-delete';
import { ApiUsersUserGuidDelete$Params } from '../fn/users/api-users-user-guid-delete';
import { apiUsersUserGuidPut$Json } from '../fn/users/api-users-user-guid-put-json';
import { ApiUsersUserGuidPut$Json$Params } from '../fn/users/api-users-user-guid-put-json';
import { apiUsersUserGuidPut$Plain } from '../fn/users/api-users-user-guid-put-plain';
import { ApiUsersUserGuidPut$Plain$Params } from '../fn/users/api-users-user-guid-put-plain';
import { UserResponse } from '../models/user-response';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUsersGet()` */
  static readonly ApiUsersGetPath = '/api/Users';

  /**
   * Запрос на получение пользователей.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersGet$Plain$Response(params: ApiUsersGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return apiUsersGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на получение пользователей.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersGet$Plain(params: ApiUsersGet$Plain$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.apiUsersGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

  /**
   * Запрос на получение пользователей.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersGet$Json$Response(params: ApiUsersGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return apiUsersGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на получение пользователей.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersGet$Json(params: ApiUsersGet$Json$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.apiUsersGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

  /** Path part for operation `apiUsersPost()` */
  static readonly ApiUsersPostPath = '/api/Users';

  /**
   * Запрос на создание пользователя.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsersPost$Plain$Response(params?: ApiUsersPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return apiUsersPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на создание пользователя.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsersPost$Plain(params?: ApiUsersPost$Plain$Params, context?: HttpContext): Observable<UserResponse> {
    return this.apiUsersPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /**
   * Запрос на создание пользователя.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsersPost$Json$Response(params?: ApiUsersPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return apiUsersPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на создание пользователя.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsersPost$Json(params?: ApiUsersPost$Json$Params, context?: HttpContext): Observable<UserResponse> {
    return this.apiUsersPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `apiUsersUserGuidPut()` */
  static readonly ApiUsersUserGuidPutPath = '/api/Users/{userGuid}';

  /**
   * Запрос на обновление данных о пользователе.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersUserGuidPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsersUserGuidPut$Plain$Response(params: ApiUsersUserGuidPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return apiUsersUserGuidPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на обновление данных о пользователе.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersUserGuidPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsersUserGuidPut$Plain(params: ApiUsersUserGuidPut$Plain$Params, context?: HttpContext): Observable<UserResponse> {
    return this.apiUsersUserGuidPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /**
   * Запрос на обновление данных о пользователе.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersUserGuidPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsersUserGuidPut$Json$Response(params: ApiUsersUserGuidPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return apiUsersUserGuidPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на обновление данных о пользователе.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersUserGuidPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsersUserGuidPut$Json(params: ApiUsersUserGuidPut$Json$Params, context?: HttpContext): Observable<UserResponse> {
    return this.apiUsersUserGuidPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `apiUsersUserGuidDelete()` */
  static readonly ApiUsersUserGuidDeletePath = '/api/Users/{userGuid}';

  /**
   * Запрос на создание пользователя.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersUserGuidDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserGuidDelete$Response(params: ApiUsersUserGuidDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiUsersUserGuidDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на создание пользователя.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersUserGuidDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserGuidDelete(params: ApiUsersUserGuidDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiUsersUserGuidDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
