/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAuthIsValidTokenGet$Json } from '../fn/auth/api-auth-is-valid-token-get-json';
import { ApiAuthIsValidTokenGet$Json$Params } from '../fn/auth/api-auth-is-valid-token-get-json';
import { apiAuthIsValidTokenGet$Plain } from '../fn/auth/api-auth-is-valid-token-get-plain';
import { ApiAuthIsValidTokenGet$Plain$Params } from '../fn/auth/api-auth-is-valid-token-get-plain';
import { apiAuthLogoutPost } from '../fn/auth/api-auth-logout-post';
import { ApiAuthLogoutPost$Params } from '../fn/auth/api-auth-logout-post';
import { apiAuthRefreshTokenPost$Json } from '../fn/auth/api-auth-refresh-token-post-json';
import { ApiAuthRefreshTokenPost$Json$Params } from '../fn/auth/api-auth-refresh-token-post-json';
import { apiAuthRefreshTokenPost$Plain } from '../fn/auth/api-auth-refresh-token-post-plain';
import { ApiAuthRefreshTokenPost$Plain$Params } from '../fn/auth/api-auth-refresh-token-post-plain';
import { apiAuthSignInPost$Json } from '../fn/auth/api-auth-sign-in-post-json';
import { ApiAuthSignInPost$Json$Params } from '../fn/auth/api-auth-sign-in-post-json';
import { apiAuthSignInPost$Plain } from '../fn/auth/api-auth-sign-in-post-plain';
import { ApiAuthSignInPost$Plain$Params } from '../fn/auth/api-auth-sign-in-post-plain';
import { apiAuthSignUpPost$Json } from '../fn/auth/api-auth-sign-up-post-json';
import { ApiAuthSignUpPost$Json$Params } from '../fn/auth/api-auth-sign-up-post-json';
import { apiAuthSignUpPost$Plain } from '../fn/auth/api-auth-sign-up-post-plain';
import { ApiAuthSignUpPost$Plain$Params } from '../fn/auth/api-auth-sign-up-post-plain';
import { IssuedTokenResponse } from '../models/issued-token-response';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiAuthIsValidTokenGet()` */
  static readonly ApiAuthIsValidTokenGetPath = '/api/Auth/IsValidToken';

  /**
   * Запрос на валидацию токена доступа.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthIsValidTokenGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthIsValidTokenGet$Plain$Response(params: ApiAuthIsValidTokenGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return apiAuthIsValidTokenGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на валидацию токена доступа.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthIsValidTokenGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthIsValidTokenGet$Plain(params: ApiAuthIsValidTokenGet$Plain$Params, context?: HttpContext): Observable<boolean> {
    return this.apiAuthIsValidTokenGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /**
   * Запрос на валидацию токена доступа.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthIsValidTokenGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthIsValidTokenGet$Json$Response(params: ApiAuthIsValidTokenGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return apiAuthIsValidTokenGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на валидацию токена доступа.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthIsValidTokenGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthIsValidTokenGet$Json(params: ApiAuthIsValidTokenGet$Json$Params, context?: HttpContext): Observable<boolean> {
    return this.apiAuthIsValidTokenGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `apiAuthSignInPost()` */
  static readonly ApiAuthSignInPostPath = '/api/Auth/SignIn';

  /**
   * Запрос на вход в учетную запись.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthSignInPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthSignInPost$Plain$Response(params?: ApiAuthSignInPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<IssuedTokenResponse>> {
    return apiAuthSignInPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на вход в учетную запись.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthSignInPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthSignInPost$Plain(params?: ApiAuthSignInPost$Plain$Params, context?: HttpContext): Observable<IssuedTokenResponse> {
    return this.apiAuthSignInPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<IssuedTokenResponse>): IssuedTokenResponse => r.body)
    );
  }

  /**
   * Запрос на вход в учетную запись.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthSignInPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthSignInPost$Json$Response(params?: ApiAuthSignInPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<IssuedTokenResponse>> {
    return apiAuthSignInPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на вход в учетную запись.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthSignInPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthSignInPost$Json(params?: ApiAuthSignInPost$Json$Params, context?: HttpContext): Observable<IssuedTokenResponse> {
    return this.apiAuthSignInPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<IssuedTokenResponse>): IssuedTokenResponse => r.body)
    );
  }

  /** Path part for operation `apiAuthRefreshTokenPost()` */
  static readonly ApiAuthRefreshTokenPostPath = '/api/Auth/RefreshToken';

  /**
   * Запрос на обновление токена доступа.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthRefreshTokenPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthRefreshTokenPost$Plain$Response(params?: ApiAuthRefreshTokenPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<IssuedTokenResponse>> {
    return apiAuthRefreshTokenPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на обновление токена доступа.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthRefreshTokenPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthRefreshTokenPost$Plain(params?: ApiAuthRefreshTokenPost$Plain$Params, context?: HttpContext): Observable<IssuedTokenResponse> {
    return this.apiAuthRefreshTokenPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<IssuedTokenResponse>): IssuedTokenResponse => r.body)
    );
  }

  /**
   * Запрос на обновление токена доступа.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthRefreshTokenPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthRefreshTokenPost$Json$Response(params?: ApiAuthRefreshTokenPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<IssuedTokenResponse>> {
    return apiAuthRefreshTokenPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на обновление токена доступа.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthRefreshTokenPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthRefreshTokenPost$Json(params?: ApiAuthRefreshTokenPost$Json$Params, context?: HttpContext): Observable<IssuedTokenResponse> {
    return this.apiAuthRefreshTokenPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<IssuedTokenResponse>): IssuedTokenResponse => r.body)
    );
  }

  /** Path part for operation `apiAuthSignUpPost()` */
  static readonly ApiAuthSignUpPostPath = '/api/Auth/SignUp';

  /**
   * Запрос на регистрацию новой учетной записи.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthSignUpPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthSignUpPost$Plain$Response(params?: ApiAuthSignUpPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<IssuedTokenResponse>> {
    return apiAuthSignUpPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на регистрацию новой учетной записи.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthSignUpPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthSignUpPost$Plain(params?: ApiAuthSignUpPost$Plain$Params, context?: HttpContext): Observable<IssuedTokenResponse> {
    return this.apiAuthSignUpPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<IssuedTokenResponse>): IssuedTokenResponse => r.body)
    );
  }

  /**
   * Запрос на регистрацию новой учетной записи.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthSignUpPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthSignUpPost$Json$Response(params?: ApiAuthSignUpPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<IssuedTokenResponse>> {
    return apiAuthSignUpPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на регистрацию новой учетной записи.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthSignUpPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthSignUpPost$Json(params?: ApiAuthSignUpPost$Json$Params, context?: HttpContext): Observable<IssuedTokenResponse> {
    return this.apiAuthSignUpPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<IssuedTokenResponse>): IssuedTokenResponse => r.body)
    );
  }

  /** Path part for operation `apiAuthLogoutPost()` */
  static readonly ApiAuthLogoutPostPath = '/api/Auth/Logout';

  /**
   * Запрос на выход из учетной записи.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthLogoutPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthLogoutPost$Response(params?: ApiAuthLogoutPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAuthLogoutPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Запрос на выход из учетной записи.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthLogoutPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthLogoutPost(params?: ApiAuthLogoutPost$Params, context?: HttpContext): Observable<void> {
    return this.apiAuthLogoutPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
